const express = require("express");
const fs = require("fs");
const empData = require('./emp_data.json');
const app = express();
const PORT = 1000;
app.use(express.json());

app.get("/emp-data", (req, res)=>{
    res.json(empData);
})

app.route("/emp-data/:id")

.get((req, res)=>{
    const id = Number(req.params.id);
    const emp = empData.find((emp)=>emp.id == id);
    if(!emp) return res.status(404).json("USER_NOT_FOUND");
    return res.json(emp);
})

.put((req, res)=>{
    const id = Number(req.params.id);
    if (isNaN(id)) {
        return res.status(400).json({ error: "Invalid user ID" });
    }

    const empIndex = empData.findIndex(emp => emp.id === id);
    if (empIndex === -1) {
        return res.status(404).json({ error: "User not found" });
    }

    const updatedEmp = {
        ...empData[empIndex],
        ...req.body // Assuming req.body contains the fields to be updated
    };

    empData[empIndex] = updatedEmp;

    fs.writeFile("emp_data.json", JSON.stringify(empData, null, 2), (err) => {
        if (err) {
            return res.status(500).json({ error: "Failed to save user data" });
        }
        return res.json({
            status: "success",
            emp: updatedEmp
        });
    });
})

.delete((req, res) => {
    const id = Number(req.params.id);
if (isNaN(id)) {
    return res.status(400).json({ error: "Invalid user ID" });
}

const empIndex = empData.findIndex(emp => emp.id === id);
if (empIndex === -1) {
    return res.status(404).json({ error: "User not found" });
}

// Remove the user from the array
empData.splice(empIndex, 1);

// Write the updated users array to the file
fs.writeFile("emp_data.json", JSON.stringify(empData, null, 2), (err) => {
   if (err) {
       return res.status(500).json({ error: "Failed to save user data" });
   }
   return res.json({
       status: "success",
       message: `employee with id ${id} deleted`
   });
});
})

app.post("/emp-data", (req, res)=>{
    // Calculate the new ID
    const newId = empData.length +1;
    
    // Create the new employee object with auto-incremented ID and only necessary fields
    const newEmployee = {
        ...req.body,
        id: newId
    };
    
    // Add the new employee to the data
    empData.push(newEmployee);
    
    // Write the updated data back to the file
    fs.writeFileSync("emp_data.json", JSON.stringify(empData));
    
    // Send success response
    res.json({
        status: "success",
        newEmployee: newEmployee
    });
});

app.listen(PORT, ()=>{
    console.log(`Server is started on port: ${PORT}`);
})